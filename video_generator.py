import os
import sys
import argparse
import time
from dotenv import load_dotenv
from openai import OpenAI

# Set UTF-8 encoding for Windows console
if sys.platform == "win32":
    try:
        sys.stdout.reconfigure(encoding='utf-8')
    except:
        pass

# Load environment variables
load_dotenv()

# Azure OpenAI configuration from environment variables
endpoint = os.getenv("AZURE_OPENAI_ENDPOINT")
deployment = os.getenv("AZURE_OPENAI_DEPLOYMENT")
api_key = os.getenv("AZURE_OPENAI_API_KEY")

if not all([endpoint, deployment, api_key]):
    raise ValueError("Missing required environment variables. Please check your .env file.")

# Initialize OpenAI client for Azure (using base OpenAI class with Azure endpoint)
client = OpenAI(
    api_key=api_key,
    base_url=f"{endpoint}openai/v1/",
    default_headers={"api-key": api_key}  # Azure requires api-key header
)

# Parse command-line arguments
parser = argparse.ArgumentParser(
    description='Generate videos with Azure OpenAI Sora-2',
    formatter_class=argparse.RawDescriptionHelpFormatter,
    epilog='''
Examples:
  # Text-to-video
  python video_generator.py "A cat playing with a ball of yarn"
  python video_generator.py "Ocean waves at sunset" --seconds 8 --output ocean.mp4
  
  # Image-to-video (animate a still image)
  python video_generator.py "Ocean waves continue" --input-image last_frame.jpg -o segment2.mp4
  
  # Video extension (daisy-chaining)
  python video_generator.py "Scene continues" -i frame.jpg -s 12 -o next_clip.mp4

Note: Maximum resolution is 1080p (1920x1080) and maximum duration is 12 seconds.
    '''
)
parser.add_argument('prompt', help='Text description of the video to generate')
parser.add_argument('-s', '--seconds', type=int, default=12, choices=[4, 8, 12],
                    help='Video duration in seconds (options: 4, 8, or 12; default: 12)')
parser.add_argument('-r', '--size', type=str, default='1280x720',
                    help='Video resolution WIDTHxHEIGHT (default: 1280x720)')
parser.add_argument('-o', '--output', type=str, default='output.mp4',
                    help='Output filename (default: output.mp4)')
parser.add_argument('-i', '--input-image', type=str, default=None,
                    help='Input image file for image-to-video generation (optional)')

args = parser.parse_args()

# Generate video
try:
    if args.input_image:
        # Image-to-video mode
        print(f"üé¨ Generating video with Sora-2 (Image-to-Video mode)...")
        print(f"Input image: {args.input_image}")
        print(f"Prompt: {args.prompt}")
        print(f"Duration: {args.seconds} seconds")
        print(f"Size: {args.size}")
        print(f"Output: {args.output}\n")
        
        with open(args.input_image, "rb") as image_file:
            video = client.videos.create(
                model=deployment,
                prompt=args.prompt,
                size=args.size,
                seconds=str(args.seconds),
                input_reference=image_file
            )
    else:
        # Text-to-video mode
        print(f"üé¨ Generating video with Sora-2 (Text-to-Video mode)...")
        print(f"Prompt: {args.prompt}")
        print(f"Duration: {args.seconds} seconds")
        print(f"Size: {args.size}")
        print(f"Output: {args.output}\n")
        
        video = client.videos.create(
            model=deployment,
            prompt=args.prompt,
            size=args.size,
            seconds=str(args.seconds)
        )
    
    print(f"‚è≥ Job ID: {video.id}")
    print(f"‚è≥ Polling status...\n")
    
    # Poll for completion
    while video.status not in ["completed", "failed", "cancelled"]:
        print(f"Status: {video.status}")
        time.sleep(10)
        video = client.videos.retrieve(video.id)
    
    if video.status == "completed":
        print(f"\n‚úÖ Video generation succeeded!")
        print(f"‚¨áÔ∏è  Downloading video...")
        
        # Download the video
        content = client.videos.download_content(video.id, variant="video")
        content.write_to_file(args.output)
        
        # Get file size
        file_size = os.path.getsize(args.output) / (1024 * 1024)  # MB
        print(f'‚úÖ Video saved as "{args.output}" ({file_size:.2f} MB)')
        print(f'üéµ Video includes audio generated by Sora-2')
    else:
        print(f"\n‚ùå Video generation failed with status: {video.status}")
        if hasattr(video, 'error'):
            print(f"Error: {video.error}")
        sys.exit(1)

except Exception as e:
    print(f"\n‚ùå Error: {e}")
    sys.exit(1)
