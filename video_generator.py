import os
import sys
import argparse
import requests
import json
import time
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Azure OpenAI configuration from environment variables
endpoint = os.getenv("AZURE_OPENAI_ENDPOINT")
deployment = os.getenv("AZURE_OPENAI_DEPLOYMENT")
subscription_key = os.getenv("AZURE_OPENAI_API_KEY")

if not all([endpoint, deployment, subscription_key]):
    raise ValueError("Missing required environment variables. Please check your .env file.")

api_version = "preview"
path = f'openai/v1/videos'
params = f'?api-version={api_version}'
constructed_url = endpoint + path + params

# Parse command-line arguments
parser = argparse.ArgumentParser(
    description='Generate videos with Azure OpenAI Sora-2',
    formatter_class=argparse.RawDescriptionHelpFormatter,
    epilog='''
Examples:
  python video_generator.py "A cat playing with a ball of yarn"
  python video_generator.py "Ocean waves at sunset" --seconds 8 --output ocean.mp4
  python video_generator.py "City traffic time-lapse" -s 10 -o city.mp4

Note: Maximum resolution is 720p (1280x720) and maximum duration is 12 seconds.
    '''
)
parser.add_argument('prompt', help='Text description of the video to generate')
parser.add_argument('-s', '--seconds', type=str, default='12', 
                    help='Video duration in seconds (max: 12, default: 12)')
parser.add_argument('-r', '--size', type=str, default='1280x720',
                    help='Video resolution WIDTHxHEIGHT (max: 1280x720, default: 1280x720)')
parser.add_argument('-o', '--output', type=str, default='output.mp4',
                    help='Output filename (default: output.mp4)')

args = parser.parse_args()

headers = {
  'Api-Key': subscription_key,
  'Content-Type': 'application/json',
}

body = {
  "model": deployment,
  "prompt": args.prompt,
  "seconds": args.seconds,
  "size": args.size
}

print(f"üé¨ Generating video with Sora-2...")
print(f"Prompt: {body['prompt']}")
print(f"Duration: {body['seconds']} seconds")
print(f"Size: {body['size']}")
print(f"Output: {args.output}\n")

job_response = requests.post(constructed_url, headers=headers, json=body)

if not job_response.ok:
    print("‚ùå Video generation failed.")
    print(json.dumps(job_response.json(), sort_keys=True, indent=4, separators=(',', ': ')))
    exit(1)
else:
    job_data = job_response.json()
    
    # Check if we got a job ID
    if 'id' in job_data:
        job_id = job_data.get("id")
        status = job_data.get("status")
        status_url = f"{endpoint}openai/v1/videos/{job_id}?api-version={api_version}"

        print(f"‚è≥ Job ID: {job_id}")
        print(f"‚è≥ Polling status...\n")
        
        while status not in ["succeeded", "completed", "failed"]:
            time.sleep(5)
            status_response = requests.get(status_url, headers=headers)
            job_data = status_response.json()
            status = job_data.get("status")
            progress = job_data.get("progress", 0)
            print(f"Status: {status} (Progress: {progress}%)")

        if status in ["succeeded", "completed"]:
            print(f"\n‚úÖ Video generation succeeded!")
            
            # Download the video
            video_url = f'{endpoint}openai/v1/videos/{job_id}/content?api-version={api_version}'
            
            print(f"‚¨áÔ∏è  Downloading video...")
            video_response = requests.get(video_url, headers=headers)
            
            if video_response.ok:
                with open(args.output, "wb") as file:
                    file.write(video_response.content)
                file_size = len(video_response.content) / (1024 * 1024)  # MB
                print(f'‚úÖ Video saved as "{args.output}" ({file_size:.2f} MB)')
                print(f'üéµ Video includes audio generated by Sora-2')
            else:
                print(f"‚ùå Failed to download video: {video_response.status_code}")
                exit(1)
                
        elif status == "failed":
            print("\n‚ùå Video generation failed.")
            error_info = job_data.get("error", {})
            if error_info:
                print(f"Error code: {error_info.get('code')}")
                print(f"Error message: {error_info.get('message')}")
            exit(1)
    else:
        print("‚ö†Ô∏è Unexpected response format")
        print(json.dumps(job_data, sort_keys=True, indent=4, separators=(',', ': ')))
        exit(1)
